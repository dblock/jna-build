
repositories {
  mavenCentral()
}

version = '4.4.0'
String jnaDir = 'build/jna'
String jarDir = 'build/jar'
String pkgDir = 'com/sun/jna'

configurations {
  jna
}

dependencies {
   jna "net.java.dev.jna:jna:${version}"
}

task clean(type: Delete) {
  delete buildDir
}

task extractRelease(type: Copy) {
  dependsOn clean
  into jarDir
  from { zipTree(configurations.jna.singleFile) }
}

task removeUnsupported(type: Delete) {
  dependsOn extractRelease
  delete "${jarDir}/${pkgDir}/aix-ppc"
  delete "${jarDir}/${pkgDir}/aix-ppc64"
  delete "${jarDir}/${pkgDir}/linux-aarch64"
  delete "${jarDir}/${pkgDir}/linux-arm"
  delete "${jarDir}/${pkgDir}/linux-armel"
  delete "${jarDir}/${pkgDir}/linux-ppc"
  delete "${jarDir}/${pkgDir}/linux-ppc64le"
  delete "${jarDir}/${pkgDir}/linux-x86"
  delete "${jarDir}/${pkgDir}/sunos-x86-64"
}

/** A better exec task which captures output and only prints it on failure. */
class LoggedExec extends Exec {
  protected ByteArrayOutputStream output = new ByteArrayOutputStream()

  LoggedExec() {
    if (logger.isInfoEnabled() == false) {
      standardOutput = output
      errorOutput = output
      ignoreExitValue = true
      doLast {
        if (execResult.exitValue != 0) {
          output.toString('UTF-8').eachLine { line -> logger.error(line) }
          throw new GradleException("Process '${executable} ${args.join(' ')}' finished with non-zero exit value ${execResult.exitValue}")
        }
      }
    }
  }
}

task checkoutJna(type: LoggedExec) {
  doFirst {
    file(jnaDir).parentFile.mkdirs()
  }
  commandLine 'git', 'clone', '-b', version, 'https://github.com/java-native-access/jna', jnaDir
}

task buildNative(type: LoggedExec) {
  dependsOn checkoutJna
  doFirst {
    String versionLine = new File("${jnaDir}/src/com/sun/jna/Version.java").readLines('UTF-8').find {
      it.contains('VERSION_NATIVE')
    }
    String nativeVersion = (versionLine =~ /\d+\.\d+\.\d+/)[0]
    String arg = "cd /vagrant/${jnaDir}/native && ant -Djni.version=${nativeVersion}"
    args 'ssh', '-c', arg
  }
  executable 'vagrant'
}

task replaceNative(type: Copy) {
  dependsOn extractRelease, buildNative
  into "${jarDir}/${pkgDir}"
  from("${jnaDir}/native/target/native-linux-x86-64") {
    into 'linux-x86-64'
    include 'libjnidispatch.so'
  }
}

task buildJar(type: Zip) {
  dependsOn removeUnsupported, replaceNative
  from jarDir
  destinationDir = file('build/distributions')
  version = project.version
  baseName 'jna'
  extension = 'jar'
}

task assemble {
  dependsOn buildJar
}
